import { renderHeader } from '../../components/header.js';
import { insertPost } from '../../components/post.js';
import { SERVER_URL } from '../../consts.js';
renderHeader();

const state = {
  comments: [],
};

const postContainerElement = document.getElementById('post-preview');
const commentsContainerElement = document.getElementById('comments-container');

const commentTmpl = document.getElementById('comment-template');

function renderComment(comment) {
  // 1) –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ <template>
  const frag = commentTmpl.content.cloneNode(true);

  //fetch(postId)

  // 2) –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
  const titleSlot = frag.querySelector('slot[name="title"]');
  const bodySlot = frag.querySelector('slot[name="body"]');
  const commentWrapper = frag.querySelector('.comment-remark');

  titleSlot.textContent = comment.userId;
  bodySlot.textContent = comment.content;
  console.log(commentWrapper);
  commentWrapper.dataset.id = comment.id;

  // –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ª–∞–≥–∏–Ω–µ–Ω—ã—Ö
  const btnDelete = frag.querySelector('.btn-delete');
  btnDelete.addEventListener('click', deleteComment);

  if (comment.userId !== 'User_0') {
    console.log('1+');
    btnDelete.remove();
  } else {
    btnDelete.addEventListener('click', deleteComment);
  }

  // 4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç-—Ñ—Ä–∞–≥–º–µ–Ω—Ç
  return frag;
}

// –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞.
// function deleteComment(e) {
//   const commentEl = e.target.closest('.comment-remark');
//   if (commentEl) commentEl.remove();
// }

async function deleteComment(e) {
  const commentEl = e.target.closest('.comment-remark');
  if (!commentEl) return;

  // console.log('—É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç:', commentEl);
  // console.log('dataset:', commentEl.dataset);
  // console.log('commentId –∏–∑ dataset.id ‚Üí', commentEl.dataset.id);

  const commentId = commentEl.dataset.id;
  const postId = new URLSearchParams(window.location.search).get('postId');

  try {
    // 1. –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç (–∏–ª–∏ –±–µ—Ä—ë–º –∏–∑ state.comments, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏)
    const postRes = await fetch(`${SERVER_URL}/posts/${postId}`);
    if (!postRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç');
    const post = await postRes.json();

    // 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ id
    const updatedComments = (post.comments || []).filter(c => c.id !== commentId);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const patchRes = await fetch(`${SERVER_URL}/posts/${postId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ comments: updatedComments })
    });
    if (!patchRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');

    // 4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º –Ω–æ–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    commentEl.remove();

    const countSpan = postContainerElement.querySelector('.btn-posts__count');
    countSpan.textContent = updatedComments.length;

  } catch (err) {
    console.error(err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + err.message);
  }
}


const urlParams = new URLSearchParams(window.location.search);

async function loadPost() {
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const postId = urlParams.get('postId');
    const res = await fetch(`${SERVER_URL}/posts/${postId}`);
    const post = await res.json();
    console.log('POST', post);

    if (!post) {
      postContainerElement.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç.</p>';
      return;
    }

    insertPost(
      post,
      '#post-preview',
      'pointer-events: none; border: 1px solid rgba(0, 16, 36, 0.12); background: none'
    );
  } catch (err) {
    console.error(err);
    postContainerElement.innerHTML = '<p class="error">NOT RESOLVE POSR.</p>';
  }
}

async function loadComments() {
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const postId = urlParams.get('postId');
    const res = await fetch(`${SERVER_URL}/posts/${postId}`);
    const post = await res.json();
    const comments = await post.comments;

    state.comments = comments;

    console.log(comments, 'üòç');
    state.comments.forEach((comment) => {
      const commentNode = renderComment(comment);
      commentsContainerElement.appendChild(commentNode);
    });
  } catch (err) {
    console.error(err);
    container.innerHTML = '<p class="error">NOT RESOLVE POSR.</p>';
  }
}

loadComments();
loadPost();

async function sendComment(e) {
  e.preventDefault();

  const textarea = document.getElementById('story');
  const text = textarea.value.trim();
  if (!text) return;  // –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ

  // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const newComment = {
    id: new Date().toString(),
    userId: 'User_0',
    content: text,
    avatar: './svg'
    // –Ω–µ –∫–ª–∞–¥—ë–º –∑–¥–µ—Å—å `id` ‚Äî –ø—É—Å—Ç—å —Å–µ—Ä–≤–µ—Ä —Å–∞–º –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
  };

  // 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å postId –∏–∑ URL
  const postId = new URLSearchParams(window.location.search).get('postId');

  try {
    // 3. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ comments
    const postRes = await fetch(`${SERVER_URL}/posts/${postId}`);
    if (!postRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç');
    const post = await postRes.json();

    // 4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const updatedComments = [...(post.comments || []), newComment];

    // 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å PATCH –Ω–∞ –±–µ–∫–µ–Ω–¥
    const patchRes = await fetch(`${SERVER_URL}/posts/${postId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ comments: updatedComments })
    });
    if (!patchRes.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');

    // 6. –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const updatedPost = await patchRes.json();
    state.comments = updatedPost.comments;

    // 7. –ù–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ)
    const savedComment = state.comments[state.comments.length - 1];

    // 8. –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –µ–≥–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ DOM
    const commentNode = renderComment(savedComment);
    commentsContainerElement.appendChild(commentNode);

    // 9. –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –¥–ª–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞
    const countSpan = postContainerElement.querySelector('.btn-posts__count');
    countSpan.textContent = state.comments.length;

    // 10. –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    textarea.value = '';

  } catch (err) {
    console.error(err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + err.message);
  }
}

const btnSendComment = document.getElementById('comment-form');
console.log(btnSendComment);
btnSendComment.addEventListener('submit', sendComment);
