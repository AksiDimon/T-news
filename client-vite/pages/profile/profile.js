import { renderHeader } from '../../components/header.js';
import { insertPost } from '../../components/post.js';

renderHeader();
// –ü–æ–ª—É—á–∞–µ–º —É–∑–ª—ã –æ–¥–∏–Ω —Ä–∞–∑
const commentTmpl = document.getElementById('comment-template');
const form = document.getElementById('comment-form');
const textarea = document.getElementById('story');
const commentsCont = document.getElementById('comments-container');

//–ª–æ–≥–∏–∫–∞ —Å —Ä–µ–¥–∞–∫ —Ñ–æ—Ç–æ
const editPhotoBtn = document.querySelector('.profile__edit-photo');
const avatarInput   = document.getElementById('avatar-input');
const avatarImg     = document.querySelector('.profile__avatar img');

editPhotoBtn.addEventListener('click', () => avatarInput.click());


avatarInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  // 2.1. –ü—Ä–µ–≤—å—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  const reader = new FileReader();
  reader.onload = () => {
    avatarImg.src = reader.result;
  };
  reader.readAsDataURL(file);

  // 2.2. –ü–∞—Ç—á–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock-—Å–µ—Ä–≤–µ—Ä–µ
  // –ó–∞–º–µ–Ω–∏—Ç–µ user_1 –Ω–∞ —Ç–µ–∫—É—â–∏–π id –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const userId = 'user_1';
  try {
    const res = await fetch(`http://localhost:3000/users/${userId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ avatar: reader.result })
    });
    if (!res.ok) throw new Error(res.statusText);
    console.log('–ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ db.json');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', err);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ');
  }
});


//–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ–ª—è --------
// –≤ profile.js, –ø–æ—Å–ª–µ renderHeader() –∏ –∫–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const EDITABLE_SELECTOR = '.profile__edit-icon';
const userId  = 'user_1';  // –∏–ª–∏ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ user.id
const apiBase = 'http://localhost:3000/users';

document.querySelectorAll(EDITABLE_SELECTOR).forEach(icon => {
  icon.addEventListener('click', () => {
    const field = icon.dataset.field;              // "username" –∏–ª–∏ "bio"
    // –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Ä—è–¥–æ–º
    const textEl = icon.previousElementSibling || 
                   document.querySelector(`.profile__${field}${field==='bio' ? '-text' : ''}`);
    if (!textEl) return;

    // –≤–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    textEl.contentEditable = 'true';
    textEl.focus();
    textEl.classList.add('editing'); // –º–æ–∂–Ω–æ –≤ CSS –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    const save = async () => {
      textEl.contentEditable = 'false';
      textEl.classList.remove('editing');
      textEl.removeEventListener('blur', save);

      const newValue = textEl.textContent.trim();
      if (!newValue) return;

      try {
        const res = await fetch(`${apiBase}/${userId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ [field]: newValue })
        });
        if (!res.ok) throw new Error(res.statusText);
        console.log(`–ü–æ–ª–µ ${field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ mock-server`);
      } catch (err) {
        console.error(err);
        alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${field}`);
      }
    };

    // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º blur (–∏ Enter, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    textEl.addEventListener('blur', save);
    textEl.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        e.preventDefault();
        textEl.blur();
      }
    });
  });
});



//–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–æ–≤ --------------
form.addEventListener('submit', sendComment);

async function sendComment(e) {
  e.preventDefault();

  const text = textarea.value.trim();
  if (!text) return; // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –ø—É—Å—Ç–æ

  // –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º ¬´–¥–∞–Ω–Ω—ã–µ¬ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const commentData = {
    userId: 'User', // —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—ë –∏–º—è
    content: text,
  };

  // —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  await insertPost(commentData, "#posts-container");

  textarea.value = ''; // —á–∏—Å—Ç–∏–º –ø–æ–ª–µ
  textarea.focus();
}

function handleLike(e) {
  const btn = e.currentTarget;

  const countSpan = btn.querySelector('.count-like');

  let count = Number(countSpan.textContent.trim());

  const isLiked = btn.classList.contains('liked');
  isLiked;
  if (!isLiked) {
    countSpan.textContent = ` ${count + 1}`;
    btn.classList.add('liked');
  } else {
    countSpan.textContent = ` ${count - 1}`;
    btn.classList.remove('liked');
  }

  console.log(isLiked, 'üòÇ');
}

function deleteComment (e) {
    const commentEl = e.target.closest('.comment');
  if (commentEl) commentEl.remove();
}



  const subscribeBtn =  document.querySelector('.profile__subscribe');

subscribeBtn.addEventListener('click', () => {
  if (subscribeBtn.textContent.trim() === '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è') {
    subscribeBtn.textContent = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è';
  } else {
    subscribeBtn.textContent = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
  }
})
